import requests
import re
import datetime
import random

# WeatherAPI Key & Endpoint
API_KEY = "XXXXXXXXXX"
WEATHER_API_URL = "http://api.weatherapi.com/v1/forecast.json"

# Hugging Face Llama 3.2 API Config
LLAMA_API_URL = "https://api-inference.huggingface.co/models/meta-llama/Llama-3.2-1B"
HEADERS = {
    "Authorization": "Bearer hf_XXXXXXXXX",
    "Content-Type": "application/json"
}

OUTDOOR_ACTIVITIES = ["playing soccer", "tennis", "basketball", "jogging", "cycling", "hiking"]
INDOOR_ACTIVITIES = ["staying at home", "reading", "watching a movie", "playing pool"]
WINDY_ACTIVITIES = ["flying a kite"]

def get_forecast(city):
    """Fetch weather forecast for a given city."""
    params = {"key": API_KEY, "q": city, "days": 2, "aqi": "no", "alerts": "no"}
    response = requests.get(WEATHER_API_URL, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        return {"error": f"Failed to fetch forecast. {response.text}"}

def query_llama(prompt):
    """Query Llama API and return a generated response."""
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 150,
            "temperature": 0.7,
            "top_p": 0.9,
            "stop": ["\n"]
        }
    }
    response = requests.post(LLAMA_API_URL, headers=HEADERS, json=payload)
    if response.status_code == 200:
        try:
            llama_output = response.json()
            if isinstance(llama_output, dict) and "generated_text" in llama_output:
                return llama_output["generated_text"].strip()
            elif isinstance(llama_output, list) and len(llama_output) > 0 and "generated_text" in llama_output[0]:
                return llama_output[0]["generated_text"].strip()
        except Exception:
            return None
    return None

def extract_cities(user_input):
    """Extract city names from user input after a colon."""
    match = re.search(r"cities?:\s*(.*)", user_input, re.IGNORECASE)
    if match:
        city_part = match.group(1)
        city_list = [city.strip() for city in city_part.split(",") if city.strip()]
        return city_list
    return []


def analyze_weather_for_activity(forecast_data):
    """Return weather condition and suggested activity."""
    try:
        tomorrow = (datetime.datetime.utcnow() + datetime.timedelta(days=1)).date()
        for day in forecast_data["forecast"]["forecastday"]:
            date = datetime.datetime.strptime(day["date"], "%Y-%m-%d").date()
            if date == tomorrow:
                condition = day["day"]["condition"]["text"].lower()
                wind_kph = day["day"].get("maxwind_kph", 0)

                if "rain" in condition or "shower" in condition:
                    return "rainy", random.choice(INDOOR_ACTIVITIES)
                elif "sunny" in condition or "clear" in condition:
                    return "sunny", None  # assigned later to avoid duplicates
                elif wind_kph >= 25:
                    return "windy", random.choice(WINDY_ACTIVITIES)
                else:
                    return "cloudy", random.choice(INDOOR_ACTIVITIES)
        return "unknown", "No data for tomorrow."
    except:
        return "error", "Could not analyze weather."

def generate_city_activity_advice(cities):
    """Generate unique activity suggestions per city based on forecast."""
    used_activities = []
    city_advice = []
    for city in cities:
        forecast = get_forecast(city)
        if "error" in forecast:
            city_advice.append(f"‚ö†Ô∏è Could not get weather data for {city}.")
            continue

        condition, activity = analyze_weather_for_activity(forecast)

        if condition == "sunny":
            # Choose a unique sport not used yet
            available = [a for a in OUTDOOR_ACTIVITIES if a not in used_activities]
            if available:
                activity = random.choice(available)
                used_activities.append(activity)
            else:
                activity = "spending time outdoors"
        elif condition == "error":
            city_advice.append(f"‚ö†Ô∏è Failed to process weather for {city}.")
            continue

        city_advice.append(f"In {city}, tomorrow's weather is {condition}. We recommend {activity}.")

    return "\n".join(city_advice)

def generate_response_for_multiple_cities(user_query, cities):
    """Prepare Llama prompt based on activity recommendations for cities."""
    advice = generate_city_activity_advice(cities)

    prompt = f"""
    The user asked: "{user_query}"

    Please rewrite the following advice in a friendly and natural way:
    {advice}

    Avoid repeating activity types across cities if possible.
    """

    return prompt.strip(), advice

# Continuous Interaction Loop
if __name__ == "__main__":
    print("üåç Welcome to the AI Activity Suggestion Chatbot! Type 'exit' to quit.\n")

    while True:
        user_query = input("Ask about weather activities in cities! (or type 'exit' to quit): ").strip()

        if user_query.lower() == "exit":
            print("üëã Goodbye!")
            break

        cities = extract_cities(user_query)
        if not cities:
            print("‚ö†Ô∏è I couldn't detect any cities in your question. Please mention at least one.")
            continue

        llama_prompt, fallback_response = generate_response_for_multiple_cities(user_query, cities)
        ai_response = query_llama(llama_prompt) if llama_prompt else None

        if not ai_response or "The user asked" in ai_response:
            ai_response = fallback_response

        print("\nü§ñ Chatbot says:", ai_response)
        print("\nüîÑ Ask about other cities or type 'exit' to quit.\n")
