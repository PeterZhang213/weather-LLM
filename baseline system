# Simple baseline system for weather questions with advice

# Predefined weather data for cities in England with time and date 
weather_data = {
    "London": {"temperature": 18, "condition": "Partly cloudy", "time": "15:00, 23/Apr/2025"},
    "Manchester": {"temperature": 16, "condition": "Light rain", "time": "14:45, 23/Apr/2025"},
    "Birmingham": {"temperature": 17, "condition": "Sunny", "time": "14:50, 23/Apr/2025"},
    "Liverpool": {"temperature": 15, "condition": "Cloudy", "time": "14:55, 23/Apr/2025"},
    "Bristol": {"temperature": 19, "condition": "Mostly sunny", "time": "15:10, 23/Apr/2025"},
    "Leeds": {"temperature": 14, "condition": "Overcast", "time": "15:05, 23/Apr/2025"},
    "York": {"temperature": 13, "condition": "Light showers", "time": "15:15, 23/Apr/2025"},
    "Newcastle": {"temperature": 12, "condition": "Foggy", "time": "14:40, 23/Apr/2025"},
    "Cambridge": {"temperature": 20, "condition": "Sunny", "time": "15:20, 23/Apr/2025"},
    "Oxford": {"temperature": 19, "condition": "Sunny", "time": "15:25, 23/Apr/2025"},
    "Durham": {"temperature": 11, "condition": "Chilly and cloudy", "time": "15:30, 23/Apr/2025"},
    "Southampton": {"temperature": 21, "condition": "Sunny", "time": "15:35, 23/Apr/2025"},
    "Exeter": {"temperature": 18, "condition": "Partly sunny", "time": "15:40, 23/Apr/2025"},
    "Brighton": {"temperature": 17, "condition": "Windy", "time": "15:45, 23/Apr/2025"},
    "Nottingham": {"temperature": 15, "condition": "Cloudy", "time": "15:50, 23/Apr/2025"},
}


# Function to provide advice based on weather conditions
def get_weather_advice(condition):
    advice = {
        "rainy": "Don't forget to bring an umbrella!",
        "sunny": "It's sunny, so wearing a T-shirt and shorts should be comfortable.",
        "windy": "It's windy, so consider bringing a jacket or coat.",
        "cloudy": "It might feel cooler, so bring a light jacket just in case.",
        "foggy": "Be cautious if you're driving, and dress warmly.",
        "partly cloudy": "It could go either way, so dress in layers."
    }
    return advice.get(condition.lower(), "Stay prepared for changing weather!")

# Function to process user questions
def get_weather_response(question):
    question = question.lower()
    
    # Check if the question includes only a city name
    for city in weather_data:
        if city.lower() in question:
            data = weather_data[city]
            temp = data["temperature"]
            condition = data["condition"]
            time = data["time"]
            advice = get_weather_advice(condition)
            return (
                f"The temperature in {city} is {temp}Â°C.\n"
                f"The weather condition is {condition}.\n"
                f"Last updated: {time}.\n"
                f"Advice: {advice}"
            )
    
    # Default response for unrecognized input
    return "Sorry, I cannot answer that. Please ask about the temperature or weather condition in a specific city."

# Interactive loop to test the baseline system
print("Weather Bot (England Cities):  Good day mate! Ask me weather-related questions, you can ask time, temperature, conditions and even wearing advice! " )
print("But I am sorry that I only know about the English Cities since I am a English AI :). " )
print("Type 'exit' to quit.")

while True:
    user_input = input("You: ")
    if user_input.lower() == "exit":
        print("Goodbye!")
        break
    
    response = get_weather_response(user_input)
    print(f"Bot: {response}")
